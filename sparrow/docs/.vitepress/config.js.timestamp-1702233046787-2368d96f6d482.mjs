// docs/.vitepress/config.js
import { defineConfig } from "file:///D:/%E5%AD%A6%E6%A0%A1/%E5%B8%A6%E4%B8%89/100-project/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%85%A5%E9%97%A8-%E5%9B%BE%E8%A1%A8%E5%BA%93%E5%BC%80%E5%8F%91/sparrow/node_modules/.pnpm/vitepress@1.0.0-rc.31/node_modules/vitepress/dist/node/index.js";

// docs/.vitepress/plugins.js
import MarkdownItContainer from "file:///D:/%E5%AD%A6%E6%A0%A1/%E5%B8%A6%E4%B8%89/100-project/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%85%A5%E9%97%A8-%E5%9B%BE%E8%A1%A8%E5%BA%93%E5%BC%80%E5%8F%91/sparrow/node_modules/.pnpm/markdown-it-container@4.0.0/node_modules/markdown-it-container/index.mjs";
import MarkdownIt from "file:///D:/%E5%AD%A6%E6%A0%A1/%E5%B8%A6%E4%B8%89/100-project/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%85%A5%E9%97%A8-%E5%9B%BE%E8%A1%A8%E5%BA%93%E5%BC%80%E5%8F%91/sparrow/node_modules/.pnpm/markdown-it@13.0.2/node_modules/markdown-it/index.js";
var markdown = MarkdownIt({
  breaks: true,
  // 转换段落里的 '\n' 到 <br>
  highlight: true
});
var PluginDemo = (md) => {
  md.use(MarkdownItContainer, "demo", {
    validate(params) {
      return !!params.trim().match(/^demo\s*(.*)$/);
    },
    render(tokens, idx) {
      if (tokens[idx].nesting === 1) {
        var m = tokens[idx].info.trim().match(/^demo\s+(.*)$/);
        const title = m && m.length > 1 ? m[1] : "\u67E5\u770B\u4EE3\u7801";
        const content = tokens[idx + 1].type === "fence" ? tokens[idx + 1].content : "";
        const source = md.utils.escapeHtml(content);
        const contents = collectCodeContent(
          tokens,
          idx + 1,
          tokens[idx].type.replace("open", "close")
        );
        const codes = getCodes(contents);
        const attributes = getAttributes(codes.html.join(" "));
        const { uClassNameMap, uIdMap } = generateUniqueIdAndClass(attributes);
        const htmls = transform(codes.html, (content2) => {
          for (let k in uIdMap) {
            content2 = content2.replaceAll(k, uIdMap[k]);
          }
          return content2;
        });
        const scripts = transform(codes.script, (content2) => {
          content2 = deleteCommentCodes(content2);
          for (let k in uIdMap) {
            content2 = content2.replaceAll("#" + k, "#" + uIdMap[k]);
          }
          return content2;
        });
        console.log("scripts.join(", `${scripts.join()}`);
        return `${htmls.join("")}
        ${scripts.join("")}
        <details class="details custom-block"> 
          <summary>${title}</summary>        
        `;
      }
      return "</details> ";
    }
  });
};
function collectCodeContent(tokens, idx, closeType) {
  const tagMap = {
    javascript: "script",
    html: "html",
    css: "style"
  };
  const contents = [];
  let curToken = tokens[idx];
  while (curToken && curToken.type !== closeType) {
    const { type, content: code, info } = curToken;
    if (type === "fence") {
      const tag = tagMap[info.toLowerCase()] ?? "html";
      contents.push({ tag, code });
    }
    curToken = tokens[++idx];
  }
  return contents;
}
function getCodes(codeContents) {
  const codes = {
    style: [],
    script: [],
    html: []
  };
  codeContents.forEach(({ tag, code }) => {
    codes[tag].push(generateCode[tag](code));
  });
  return codes;
}
var generateCode = {
  style(code) {
    return `<style>${code}</style>`;
  },
  script(code, transforms) {
    return `<component is="script" defer> 
      (()=>{
        ${code}
      })()
    </component>`;
  },
  html(code) {
    return `${code}`;
  }
};
function getAttributes(dom) {
  var pattern = /<[^>]+>/g;
  var result = pattern.exec(dom);
  var attributes = {};
  while (result) {
    var tag = result[0];
    var pattern2 = /(id|class)\s*=\s*["'](.+?)["']/g;
    var result2 = pattern2.exec(tag);
    while (result2) {
      var key = result2[1] === "class" ? "className" : result2[1];
      var value = result2[2];
      if (attributes[key]) {
        attributes[key].push(value);
      } else {
        attributes[key] = [value];
      }
      result2 = pattern2.exec(tag);
    }
    result = pattern.exec(dom);
  }
  return attributes;
}
function generateUniqueIdAndClass(attributes) {
  const { id = [], className = [] } = attributes;
  const uIdMap = {};
  const uClassNameMap = {};
  id.forEach((k) => {
    if (!uIdMap[k]) {
      uIdMap[k] = getUniqueHash();
    }
  });
  className.forEach((k) => {
    if (!uClassNameMap[k]) {
      uClassNameMap[k] = getUniqueHash();
    }
  });
  return { uIdMap, uClassNameMap };
}
function getUniqueHash() {
  const k1 = parseInt(Math.random() * 10 ** 6).toString(36);
  const k2 = parseInt(Math.random() * 10 ** 6).toString(16);
  return `u${k1}-${k2}`;
}
function transform(arr, cb) {
  return arr.map(cb);
}
function deleteCommentCodes(content) {
  let regex = /\/\/.*|\/\*[\s\S]*?\*\//g;
  return content.replace(regex, "");
}

// docs/.vitepress/config.js
var config_default = defineConfig({
  // base: '/my_sparrow/',
  title: "VChart",
  description: "\u4E00\u4E2A\u57FA\u4E8Evue3+typescript\u7684uni-app\u8DEF\u7531\u5E93",
  themeConfig: {
    // https://vitepress.dev/reference/default-theme-config
    nav: [
      { text: "Home", link: "/" },
      { text: "Examples", link: "examples/charts/barChart" }
    ],
    sidebar: [
      {
        text: "\u56FE\u8868",
        collapsed: true,
        items: [
          { text: "\u6761\u5F62\u56FE", link: "/examples/charts/barChart" },
          { text: "\u73AB\u7470\u56FE", link: "/examples/charts/roseChart" },
          { text: "\u6298\u7EBF\u56FE", link: "/examples/charts/lineChart" },
          { text: "\u997C\u56FE", link: "/examples/charts/fanChart" },
          { text: "\u9762\u79EF\u56FE", link: "/examples/charts/areaChart" }
        ]
      },
      {
        text: "\u8F85\u52A9\u7EC4\u4EF6",
        link: "/examples/guides/"
      },
      {
        text: "\u89C6\u56FE",
        link: "/examples/views/"
      }
    ],
    socialLinks: [
      { icon: "github", link: "https://github.com/TAO233-JPG/my_sparrow" }
    ]
  },
  markdown: {
    // html: false,
    config: (md) => {
      md.use(PluginDemo);
    }
  }
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
